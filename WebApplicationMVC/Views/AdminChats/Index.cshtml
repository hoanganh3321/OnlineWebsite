@{
	ViewData["Title"] = "Admin Chat";
	var adminId = Context.Session.GetInt32("UserID"); // AdminId lưu trong session
}

<h2>Quản lý chat với khách hàng</h2>

<div style="display:flex; gap:20px;">
	<!-- Danh sách khách hàng -->
	<div style="width:200px; border:1px solid #ccc; padding:10px;">
		<h4>Khách hàng</h4>
		<ul id="customerList" style="list-style:none; padding:0; margin:0;">
			<!-- Sẽ được load bằng JS -->
		</ul>
	</div>

	<!-- Khung chat -->
	<div style="flex:1; border:1px solid #ccc; padding:10px;">
		<h4 id="chatTitle">Chọn khách hàng để chat</h4>
		<div id="chatBox" style="border:1px solid #ddd; height:300px; overflow:auto; margin-bottom:10px; padding:5px;"></div>
		<input type="text" id="messageInput" placeholder="Nhập tin nhắn..." style="width:80%;" />
		<button id="sendBtn" disabled>Gửi</button>
	</div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
<script>
	const adminId = "@adminId";
	let currentCustomerId = null;

	// Danh sách khách hàng (có thể fetch từ API, tạm thời để trống)
	const customerList = document.getElementById("customerList");
	const chatBox = document.getElementById("chatBox");
	const messageInput = document.getElementById("messageInput");
	const sendBtn = document.getElementById("sendBtn");

	// Kết nối SignalR
	const connection = new signalR.HubConnectionBuilder()
		.withUrl(`https://localhost:7224/chatHub?UserID=${adminId}`)
		.build();

	// Nhận tin nhắn real-time
	connection.on("ReceiveMessage", (senderId, message, sentAt, messageId) => {
		if (!document.getElementById(`customer-${senderId}`)) {
			addCustomerToList(senderId);
		}
		if (senderId === currentCustomerId) {
			appendMessage(senderId, message, sentAt, false);
		}
	});

	// Gửi tin nhắn
	sendBtn.addEventListener("click", async () => {
		const msg = messageInput.value.trim();
		if (!msg || !currentCustomerId) return;

		try {
			await connection.invoke("SendMessage", parseInt(adminId), currentCustomerId, msg);
			appendMessage(adminId, msg, new Date().toISOString(), true);
			messageInput.value = "";
		} catch (err) {
			console.error("Lỗi gửi tin nhắn:", err);
		}
	});

	// Kết nối
	connection.start().catch(err => console.error(err));

	// Thêm khách hàng vào danh sách bên trái
	function addCustomerToList(customerId) {
		const li = document.createElement("li");
		li.id = `customer-${customerId}`;
		li.textContent = "Khách hàng #" + customerId;
		li.style.cursor = "pointer";
		li.style.padding = "5px";
		li.addEventListener("click", () => selectCustomer(customerId));
		customerList.appendChild(li);
	}

	// Chọn khách hàng để chat
	async function selectCustomer(customerId) {
		currentCustomerId = customerId;
		document.getElementById("chatTitle").textContent = "Chat với khách hàng #" + customerId;
		chatBox.innerHTML = ""; // reset khung chat
		sendBtn.disabled = false;
		await loadHistory(customerId);
	}

	// Hiển thị tin nhắn
	function appendMessage(senderId, message, sentAt, isAdmin) {
		const msgDiv = document.createElement("div");
		msgDiv.classList.add("message", isAdmin ? "sent" : "received");

		const time = new Date(sentAt).toLocaleTimeString();
		msgDiv.innerHTML = `
			<div>${message}<span class="time">${time}</span></div>
		`;

		chatBox.appendChild(msgDiv);
		chatBox.scrollTop = chatBox.scrollHeight;
	}


	async function loadCustomers() {
		try {
			const res = await fetch("/AdminChats/GetCustomers", {
				method: "GET"
			});
			const customers = await res.json();
			customers.forEach(id => addCustomerToList(id));
		} catch (err) {
			console.error("Lỗi load danh sách khách hàng:", err);
		}
	}

	loadCustomers();

	async function loadHistory(customerId) {
		try {
			const res = await fetch(`/AdminChats/GetHistory?customerId=${customerId}`, {
				method: "GET"
			});
			const data = await res.json();
			data.forEach(m => {
				appendMessage(m.senderId, m.content, m.sentAt, m.senderId === parseInt(adminId));
			});
		} catch (err) {
			console.error("Lỗi load lịch sử:", err);
		}
	}
</script>
<style>
	.message {
		display: flex;
		margin: 5px 0;
		max-width: 70%;
		word-wrap: break-word;
		padding: 8px 12px;
		border-radius: 10px;
		font-size: 14px;
	}

		
		.message.sent {
			margin-left: auto;
			background-color: #DCF8C6; 
			text-align: right;
		}

		
		.message.received {
			margin-right: auto;
			background-color: #FFF;
			border: 1px solid #ddd;
			text-align: left;
		}

	.time {
		display: block;
		font-size: 10px;
		color: #666;
		margin-top: 3px;
	}

	#chatBox {
		border: 1px solid #ccc;
		height: 300px;
		overflow-y: auto;
		padding: 5px;
		background: #f5f5f5;
	}
</style>
